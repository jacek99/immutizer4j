buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

import java.text.SimpleDateFormat
def globalVersion = new Version(version)


repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'findbugs'

version = globalVersion
status = version.status

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {
    // Lombok is king, don't code any Java without it
    compile "org.projectlombok:lombok:1.16.16"
    // JDK++
    compile 'com.google.guava:guava:22.0'
    // logging
    compile 'org.slf4j:slf4j-api:1.7.25'

    // test support
    testCompile "org.slf4j:slf4j-simple:1.7.25"
    testCompile "junit:junit:4.12"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// code quality
findbugs {
    //ignoreFailures = true
    effort = "max"
    reportLevel = "medium"
    includeFilter = file("$rootProject.projectDir/findBugsIncludeFilter.xml")
    excludeFilter = file("$rootProject.projectDir/findBugsExcludeFilter.xml")
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

check.dependsOn test
build.dependsOn check

// published projects configuration

// publishing artifacts to Bintray JCenter
configurations {
    published
}

// upload to JCenter
artifacts {
    published sourceJar
    published javadocJar
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'

ext.publish = true
bintray {
    // grab credentials from environment variables
    user = "$System.env.BINTRAY_USER"
    key = "$System.env.BINTRAY_API_KEY"

    configurations = ['published', 'archives']
    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    pkg {
        repo = 'immutizer4j'
        name = project.name
        desc = 'Library for checking immutability of Java object graphs'
        websiteUrl = 'https://github.com/jacek99/immutizer4j'
        issueTrackerUrl = 'https://github.com/jacek99/immutizer4j/issues'
        vcsUrl = 'https://github.com/jacek99/immutizer4j'
        licenses = ['BSD']
        publicDownloadNumbers = true
    }
}


class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}
